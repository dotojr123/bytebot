version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: bytebot-postgres
    environment:
      POSTGRES_DB: bytebot
      POSTGRES_USER: bytebot
      POSTGRES_PASSWORD: supersecret
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bytebot -d bytebot"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  bytebot-agente:
    image: ghcr.io/seu-org/bytebot-agente:latest
    container_name: bytebot-agente
    env_file:
      - .env   # coloque aqui as chaves (SUPABASE_URL, SUPABASE_ANON_KEY, etc.)
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:8080/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - "8080:8080"
    restart: unless-stopped

  bytebot-desktop:
    image: ghcr.io/seu-org/bytebot-desktop:latest
    container_name: bytebot-desktop
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      bytebot-agente:
        condition: service_healthy
    # ajuste a porta real do desktop/api interno
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('net').connect(9000,'127.0.0.1').on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - "9000:9000"
    restart: unless-stopped

  bytebot-ui:
    image: ghcr.io/seu-org/bytebot-ui:latest
    container_name: bytebot-ui
    env_file:
      - .env
    environment:
      # se a UI precisa saber a URL do agente/API:
      VITE_API_URL: "http://bytebot-agente:8080"
    depends_on:
      postgres:
        condition: service_healthy
      bytebot-agente:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  pgdata:
