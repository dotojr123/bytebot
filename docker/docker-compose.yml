# Easypanel não precisa mais do "version", removido de propósito.

services:
  postgres:
    image: postgres:15
    container_name: bytebot-postgres
    environment:
      POSTGRES_DB: bytebot
      POSTGRES_USER: bytebot
      POSTGRES_PASSWORD: supersecret
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bytebot -d bytebot"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s
    ports:
      - "5432:5432"
    restart: unless-stopped

  # API/Agente
  bytebot-agente:
    # Se você já tem imagem publicada, mantenha. Se usa Dockerfile local, troque por 'build:'.
    image: bytebot/agente:latest
    container_name: bytebot-agente
    environment:
      # apontando para o serviço postgres (DNS do Compose)
      DATABASE_URL: postgres://bytebot:supersecret@postgres:5432/bytebot
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    # Healthcheck por TCP na porta 8080 (sem variável externa)
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('net').connect(8080,'127.0.0.1').on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s
    ports:
      - "8080:8080"
    restart: unless-stopped

  # Backend Desktop (se houver)
  bytebot-desktop:
    image: bytebot/desktop:latest
    container_name: bytebot-desktop
    environment:
      DATABASE_URL: postgres://bytebot:supersecret@postgres:5432/bytebot
      API_BASE_URL: http://bytebot-agente:8080
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      bytebot-agente:
        condition: service_healthy
    # Porta interna 9000 (ajuste se seu serviço usa outra)
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('net').connect(9000,'127.0.0.1').on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s
    ports:
      - "9000:9000"
    restart: unless-stopped

  # UI (painel/web)
  bytebot-ui:
    image: bytebot/ui:latest
    container_name: bytebot-ui
    environment:
      # A UI fala com o agente via rede interna
      VITE_API_URL: http://bytebot-agente:8080
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      bytebot-agente:
        condition: service_healthy
    # Porta interna 3000 (ajuste se sua UI usa nginx:80)
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('net').connect(3000,'127.0.0.1').on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  pgdata:
